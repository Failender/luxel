import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {delay, retryWhen} from 'rxjs/operators';
import {Observable} from 'rxjs';


declare var XLSX;

@Component({
  selector: 'app-parse',
  templateUrl: './parse.component.html',
  styleUrls: ['./parse.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ParseComponent implements OnInit {

  constructor(private cdr: ChangeDetectorRef, private http: HttpClient) {
  }

  ngOnInit(): void {

  }

  public displayedColumns = ['start', 'end', 'name'];
  public events: Event[];
  public existingEvents;

  public fileInputChange(event): void {

    const reader = new FileReader();
    const files = event.target.files;
    const f = files[0];
    reader.onload = e => {
      // @ts-ignore
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, {type: 'array', cellDates: true});
      this.prepareWorkbook(workbook);


      /* DO SOMETHING WITH workbook HERE */
    };
    reader.readAsArrayBuffer(f);
  }

  private prepareWorkbook(workbook): void {
    const firstSheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[firstSheetName];

    let i = 2;
    let currentDateValue;
    const maxFailureCount = 5;
    let failureCount = 0;
    const events: Event[] = [];
    while (true) {
      const dateCell = worksheet[`A` + i];
      const taskCell = worksheet[`E` + i];
      i++;
      const dateValue = dateCell ? dateCell.v : undefined;
      if (dateValue) {
        currentDateValue = dateValue;
      }
      const taskValue = taskCell ? taskCell.v : undefined;
      if (!taskValue || !currentDateValue) {
        failureCount++;
        if (failureCount > maxFailureCount) {
          break;
        }
        continue;
      }
      const startDate = new Date(currentDateValue);
      const endDate = new Date(currentDateValue);
      failureCount = 0;

      const dashIndex = taskValue.indexOf('-');
      const startDateString = taskValue.substring(0, dashIndex).trim();
      const endDateString = taskValue.substring(dashIndex + 1, taskValue.indexOf('(')).trim();

      const startHour = startDateString.substring(0, 2);
      const startMinute = startDateString.substring(3, 5);

      const endHour = endDateString.substring(0, 2);
      const endMinute = endDateString.substring(3, 5);

      const task = taskValue.substring(taskValue.indexOf(')') + 1).trim();

      startDate.setHours(parseInt(startHour, 10), parseInt(startMinute, 10));
      endDate.setHours(parseInt(endHour, 10), parseInt(endMinute, 10));
      if (endDate.getTime() < startDate.getTime()) {
        endDate.setDate(endDate.getDate() + 1);
      }
      startDate.setFullYear(2021);
      endDate.setFullYear(2021);


      events.push({
        endDate,
        startDate,
        name: task
      });
    }

    this.events = events;
    // this.createCalendarEvent(this.events[0]);
    if (this.events.length !== 0) {
      // We know the month now fetch all events so we can check for duplicates

      this.getExistingEvents();


    }
    this.cdr.markForCheck();
  }

  private getExistingEvents(): void {
    const month = this.events[0].startDate.getMonth();
    const startDate = new Date(this.events[0].startDate);
    startDate.setDate(1);
    const endDate = new Date(this.events[0].endDate);
    endDate.setDate(1);
    endDate.setMonth(endDate.getMonth() + 1);
    const uri = `https://graph.microsoft.com/v1.0/me/calendar/calendarView?startDateTime=${startDate.toISOString()}&endDateTime=${endDate.toISOString()}&$top=9999`;

    this.http.get<any>(uri)
      .subscribe(data => {
        this.existingEvents = data.value;
        this.cdr.markForCheck();
      });
  }


  private createCalendarEvent(event: Event): Observable<any> {

    const dto = {
      subject: event.name,
      body: {
        contentType: 'TEXT',
        content: 'Autogenerated luxel'
      },
      start: {
        dateTime: event.startDate.toUTCString(),
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
      },
      end: {
        dateTime: event.endDate.toUTCString(),
        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
      }
    };

    return this.http.post<any>('https://graph.microsoft.com/v1.0/me/events', dto);
  }

  public addEvents(): void {
    console.debug(this.events);
    const events = this.events.filter(entry => !this.doesEventExist(entry));
    console.debug(events);
    this.createNextEvent(events);

  }

  private doesEventExist(event): boolean {
    const existingEvent = this.existingEvents.find(entry => this.areEventsEqual(event, entry));
    if (existingEvent) {
      console.debug('event already exists - skipping', event);
      return true;
    }
    return false;
  }

  private areEventsEqual(event: Event, entry): boolean {
    const entryDate = new Date(entry.start.dateTime);
    entryDate.setMinutes(entryDate.getMinutes() - new Date().getTimezoneOffset());

    if (event.startDate.getTime() === entryDate.getTime() && event.name === entry.subject) {
      return true;
    }
    return false;

  }

  public deleteAllEvents(): void {
    this.deleteNextEvent(this.existingEvents);
    this.existingEvents = null;
    this.cdr.markForCheck();
  }

  private createNextEvent(events: Event[]): void {
    if (events.length === 0) {
      this.getExistingEvents();
      console.debug('DONE!!');
      return;
    }
    const event = events.pop();


    this.createCalendarEvent(event)
      .pipe(retryWhen(errors => errors.pipe(delay(1000))))
      .subscribe((response => {
        console.debug(events.length);

        this.createNextEvent(events);


      }));
  }

  private deleteNextEvent(events: any[]): void {
    if (events.length === 0) {
      this.existingEvents = [];
      this.cdr.markForCheck();
      return;
    }
    const event = events.pop();
    if (event.bodyPreview.indexOf('luxel') === -1) {
      console.debug('skipping event ', event.bodyPreview);
      this.deleteNextEvent(events);
    }
    this.http.delete(`https://graph.microsoft.com/v1.0/me/events/${event.id}`)
      .pipe(retryWhen(errors => errors.pipe(delay(1000))))
      .subscribe((response => {
        console.debug(events.length);

        this.deleteNextEvent(events);


      }));
  }


}

interface Event {
  startDate: Date;
  endDate: Date;
  name: string;
}
